/* Entry point for all derivations                                           */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

namespace derive {

pred exists-indc i:inductive, i:(constructor -> prop).
exists-indc I P :-
  coq.env.indt I _ _ _ _ KL _,
  std.exists KL P.

pred if-verbose i:prop.
if-verbose P :- (get-option "verbose" tt ; get-option "recursive" tt), !, P.
if-verbose _.

pred dep o:string, o:string.
dep X Y :- dep1 X Y.
dep X Y :- dep1 X Z, dep Z Y.

pred selected i:string.
selected Name :- get-option "only" Map, !,
  Map => (get-option Name _; (get-option X _, dep X Name)).
selected _.

pred validate-only i:gref, i:list derive.
validate-only T LD :- get-option "only" Map, !, std.forall Map (known-option T LD).
validate-only _ _.

pred known-option i:gref, i:list derive, i:prop.
known-option T L (get-option X _) :-
  if (std.mem! L (derive X _ _)) true
     (coq.error "Derivation" X "unknown or not applicable to input" T).

pred chain i:gref, i:list derive, o:list prop.
chain _ [] [].
chain T [derive Name _ _|FS] CL :- not(selected Name), !,
  if-verbose (coq.say "Skipping derivation" Name "on" T "since the user did not select it"),
  chain T FS CL.
chain T [derive Name _ AlreadyDone|FS] CL :- (pi x\ stop x :- !, fail) => AlreadyDone, !,
  if-verbose (coq.say "Skipping derivation" Name "on" T "since it has been already run"),
  chain T FS CL.
chain T [derive Name F _|FS] CL :- get-option "only" _, !, % request this one
  if-verbose (coq.say "Derivation" Name "on" T),
  @dropunivs! => std.time (F C) Time,
  if-verbose (coq.say "Derivation" Name "on" T "took" Time),
  C => chain T FS CS,
  std.append C CS CL.
chain T [derive Name F _|FS] CL :- % all are selected, we can fail
  if-verbose (coq.say "Derivation" Name "on" T),
  (pi x\ stop x :- !, fail) => @dropunivs! => std.time (F C) Time, !,
  if-verbose (coq.say "Derivation" Name "on" T "took" Time),
  C => chain T FS CS,
  std.append C CS CL.
chain T [derive F _ _|FS] CL :-
  if-verbose (coq.say "Derivation" F "on" T "failed, continuing"),
  chain T FS CL.

pred toposort i:list derive, o:list derive.
toposort L SL :-
  std.findall (dep1 _ _) Deps,
  topo L Deps SL.

pred std.partition i:list A, i:(A -> prop), o:list A, o:list A.
std.partition [] _ [] [].
std.partition [X|XS] P [X|R] L :- P X, !, std.partition XS P R L.
std.partition [X|XS] P R [X|L] :- std.partition XS P R L.

pred not-a-src i:list prop, i:derive.
not-a-src Deps (derive A _ _) :- not(std.mem! Deps (dep1 A _)).

pred tgt-is-not-in i:list derive, i:prop.
tgt-is-not-in [] _.
tgt-is-not-in [derive Tgt _ _|_] (dep1 _ Tgt) :- !, fail.
tgt-is-not-in [_|L] D :- tgt-is-not-in L D.

pred topo i:list derive, i:list prop, o:list derive.
topo [] _ [] :- !.
topo L Deps SL :-
  std.partition L (not-a-src Deps) LNoDeps Other,
  if (LNoDeps = []) (coq.error "derive: no topological order:" L Deps) true,
  std.filter Deps (tgt-is-not-in LNoDeps) NewDeps,
  topo Other NewDeps SOther,
  std.append LNoDeps SOther SL.

pred export? i:prop, o:prop.
export? (export M) (coq.env.export-module M).

pred indt-or-const i:gref.
indt-or-const (indt _).
indt-or-const (const _).

pred main i:gref, o:list prop.
main GR CL :- get-option "module" M, !,
  if (M = "") (coq.gref->id GR Mod) (Mod = M),
  if-verbose (coq.say "Starting module" Mod),
  coq.env.begin-module Mod none,
  main-derive GR tt CL,
  coq.env.end-module _.
main GR CL :-
  main-derive GR ff CL.

pred main-derive i:gref, i:bool, o:list prop.
main-derive GR InModule CL :- get-option "recursive" tt, !,
  coq.env.dependencies GR _ AllDeps,
  coq.gref.set.elements AllDeps AllDepsL,
  std.filter AllDepsL indt-or-const Deps,
  main.aux InModule Deps [] CL1,
  CL1 => main1 GR InModule CL2,
  std.append CL1 CL2 CL.
main-derive GR InModule CL :- main1 GR InModule CL.

pred main.aux i:bool, i:list gref, i:list prop, o:list prop.
main.aux _ [] X X.
main.aux InModule [GR|GRS] Acc CL :-
  (pi X\get-option "only" X :- !, fail) => Acc => main-derive GR InModule CL1,
  main.aux InModule GRS {std.append CL1 Acc} CL.

pred main1 i:gref, i:bool, o:list prop.
main1 GR InModule CL :-
  if (get-option "prefix" PFX)
     (Prefix = PFX)
     (if (InModule is ff) (Prefix is {coq.gref->id GR} ^ "_") (Prefix = "")),
  std.findall (derivation GR Prefix _ _) L,
  if (L = [])
     (coq.error "no derivation found, did you Import derive.std?")
     true,
  std.map L (x\r\
    if (get-option "recursive" _)
       (x = derivation _ _ S r,
        if (S is tt)
           (coq.error "Synterp actions not supported in recursive derive.")
           true)
       (x = derivation _ _ _ r)
  ) DL,
  validate-only GR DL,
  toposort DL SortedDL,
  chain GR SortedDL CL.

pred decl+main i:string, i:indt-decl.
decl+main TypeName DS :- std.do! [
  if (get-option "module" M)
     (if (M = "") (ModName = TypeName) (ModName = M), HasModule = tt)
     (HasModule = ff),
  if (HasModule = tt)
     (if-verbose (coq.say "Starting module" ModName),
      coq.env.begin-module ModName none)
     true,
  std.assert-ok! (coq.elaborate-indt-decl-skeleton DS D) "Inductive type declaration illtyped",
  if-verbose (coq.say "Declaring inductive" D),
  coq.env.add-indt D I,
  if-verbose (coq.say "Deriving"),
  main-derive (indt I) HasModule CL,
  if-verbose (coq.say "Done"),
  if (HasModule = tt)
     (coq.env.end-module _,
      decl+main.post ModName I DS CL)
     true
].

pred decl+main.post i:string, i:inductive, i:indt-decl, o:list prop. 
decl+main.post ModName I DS CL :- std.do! [
  coq.env.indt I _ _ _ _ KS _,
  std.map KS (k\r\ r = indc k) KGRS,
  std.map KGRS coq.gref->id KNS,
  std.map KGRS (gr\r\ r = global gr) KTS,

  std.forall2 [ModName|KNS] [global (indt I)|KTS] short-alias,

  coq.indt-decl->implicits DS IndImpls KsImpls,
  if (coq.any-implicit? IndImpls)
     (@global! => coq.arguments.set-implicit (indt I) [IndImpls])
     true,
  std.forall2 KsImpls KS (i\k\
    if (coq.any-implicit? i)
       (@global! => coq.arguments.set-implicit (indc k) [i])
       true
    ),
  std.map-filter CL export? P,
  std.do! P,
].

pred short-alias i:id, i:term.
short-alias ID T :- @global! => coq.notation.add-abbreviation ID 0 T ff _.

}
